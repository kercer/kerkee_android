import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

version = '1.3.29'

def buildNdkLibsDir = new File("$buildDir/build-ndk/all")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")


task createNativeDepsDirectories {
    thirdPartyNdkDir.mkdirs()
}

task prepareThird(dependsOn: createNativeDepsDirectories, type: Copy) {
    from 'jni/Android.mk'
    include '**', 'Android.mk'
    into "$thirdPartyNdkDir/kerkee"
}

def getNdkBuildName() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "ndk-build.cmd"
    } else {
        return "ndk-build"
    }
}

def findNdkBuildFullPath() {
    File propFile = project.rootProject.file('local.properties')
    if (!propFile.exists()) {
        return getNdkBuildName()
    }
    Properties properties = new Properties()
    properties.load(propFile.newDataInputStream())
    def ndkCommand = properties.getProperty('ndk.command')
    if (ndkCommand != null) {
        return ndkCommand
    }
    def path = null
    def ndkPath = properties.getProperty('ndk.path')
    if (ndkPath != null) {
        path = ndkPath
    } else {
        def ndkDir = properties.getProperty('ndk.dir')
        if (ndkDir != null) {
            path = ndkDir
        }
    }
    if (path != null) {
        if (!path.endsWith(File.separator)) {
            path += File.separator
        }
        return path + getNdkBuildName()
    } else {
        // if none of above is provided, we assume ndk-build is already in $PATH
        return getNdkBuildName()
    }
}

def getNdkBuildFullPath() {
    def ndkBuildFullPath = findNdkBuildFullPath()
    if (ndkBuildFullPath == null) {
        throw new Exception(
                "ndk-build binary cannot be found, check if you've set " +
                        "\$ANDROID_NDK environment variable correctly or if ndk.dir is " +
                        "setup in local.properties",
                null)
    }
    if (!new File(ndkBuildFullPath).canExecute()) {
        throw new Exception(
                "ndk-build binary " + ndkBuildFullPath + " doesn't exist or isn't executable.\n" +
                        "Check that the \$ANDROID_NDK environment variable, or ndk.dir in local.proerties, is set correctly.\n" +
                        "(On Windows, make sure you escape backslashes in local.properties or use forward slashes, e.g. C:\\\\ndk or C:/ndk rather than C:\\ndk)",
                null)
    }
    return ndkBuildFullPath
}

task buildNdkLibs(dependsOn: [prepareThird], type: Exec) {
    inputs.files('jni')
//    outputs.dir("$buildNdkLibsDir")
    outputs.dir("$buildNdkLibsDir")
    commandLine getNdkBuildFullPath(),
//            'NDK_PROJECT_PATH=null',
            "NDK_APPLICATION_MK=$projectDir/jni/Application.mk",
            'NDK_OUT=' + temporaryDir,
            "NDK_LIBS_OUT=$buildNdkLibsDir",
            "THIRD_PARTY_NDK_DIR=$thirdPartyNdkDir",
            '-C', file('jni').absolutePath,
            '--jobs', Runtime.runtime.availableProcessors()

}

task cleanNdkLibs(type: Exec) {
    commandLine getNdkBuildFullPath(),
            '-C', file('jni').absolutePath,
            'clean'
}

task cleanSo(dependsOn: buildNdkLibs, type: Delete) {
    delete 'libs'
}

task packageNdkLibs(dependsOn: cleanSo, type: Copy) {
    from "$buildNdkLibsDir"
//    exclude '**/libjsc.so'
    into 'libs'
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName version
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']

            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']

        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes.debug.jniDebuggable false

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn packageNdkLibs
    }

    clean.dependsOn cleanNdkLibs

    lintOptions {
        abortOnError false
    }

}

dependencies {
    api fileTree(dir: 'libs', include: '*.jar')
    api "com.kercer:kernet:1.3.2"

//    compile project(':..:kercore_android:kercore') //debug
//    compile project(':..:kernet_android:kernet') //debug

}

//apply from: 'release.gradle'
//apply from: 'release_maven.gradle'
